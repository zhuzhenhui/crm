<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.mapper.CustomerTransferMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.domain.CustomerTransfer" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <association property="customer" javaType="cn.wolfcode.domain.Customer" columnPrefix="c_">
      <id column="id" property="id"/>
      <result column="name" property="name"/>
    </association>
    <association property="operator" javaType="cn.wolfcode.domain.Employee" columnPrefix="e_">
      <id column="id" property="id"/>
      <result column="name" property="name"/>
    </association>
    <association property="oldSeller" javaType="cn.wolfcode.domain.Employee" columnPrefix="old_">
      <id column="id" property="id"/>
      <result column="name" property="name"/>
    </association>
    <association property="newSeller" javaType="cn.wolfcode.domain.Employee" columnPrefix="new_">
      <id column="id" property="id"/>
      <result column="name" property="name"/>
    </association>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from customertransfer
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="cn.wolfcode.domain.CustomerTransfer" useGeneratedKeys="true" keyProperty="id" >
    insert into customertransfer (customer_id, operator_id, operate_time, 
      old_seller_id, new_seller_id, reason
      )
    values (#{customer.id,jdbcType=BIGINT}, #{operator.id,jdbcType=BIGINT}, #{operateTime,jdbcType=TIMESTAMP}, 
      #{oldSeller.id,jdbcType=BIGINT}, #{newSeller.id,jdbcType=BIGINT}, #{reason,jdbcType=VARCHAR}
      )
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.domain.CustomerTransfer" >
    update customertransfer
    set customer_id = #{customerId,jdbcType=BIGINT},
      operator_id = #{operator.id,jdbcType=BIGINT},
      operate_time = #{operateTime,jdbcType=TIMESTAMP},
      old_seller_id = #{oldSeller.id,jdbcType=BIGINT},
      new_seller_id = #{newSeller.id,jdbcType=BIGINT},
      reason = #{reason,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, customer_id, operator_id, operate_time, old_seller_id, new_seller_id, 
    reason
    from customertransfer
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, customer_id, operator_id, operate_time, old_seller_id, new_seller_id, 
    reason
    from customertransfer
  </select>
    <select id="selectForList" resultMap="BaseResultMap" >
      SELECT
        ct.id,
        ct.customer_id,
        ct.operator_id,
        ct.operate_time,
        ct.old_seller_id,
        ct.new_seller_id,
        ct.reason,
        c.id as c_id,
        c.name as c_name,
        e.id as e_id,
        e.name as e_name,
        old.id as old_id,
        old.name as old_name,
        new.id as new_id,
        new.name as new_name
      FROM
        customertransfer ct
        LEFT JOIN customer c on c.id = ct.customer_id
        LEFT JOIN employee e on e.id = ct.operator_id
        LEFT JOIN employee old on old.id = ct.old_seller_id
        LEFT JOIN employee new on new.id = ct.new_seller_id
      <where>
        <if test="sellerId!=null and sellerId != -1">
          and ct.new_seller_id = #{sellerId}
        </if>
      </where>
    </select>
</mapper>